C/S protocol
================


General Format
-----------------

Client commands:
<bloblength> <cmd> <parms...>\n
<data of length bloblength>

 <bloblength> - length of optional data
 <cmd> - command
 <parms> - parameters

Server answers/interrupts:
<errcode><bloblength> <answer>\n
<data of length bloblength>

 <errcode> - success or failure code ("+" or "-")
 <bloblength> - length of data (if not sent: 0)
 <answer> - answer string or machine readable error info
 <data> - answer data (eg. patchfile) or error message

Any space character divides arguments. Use "\ " for normal spaces.
Strings which contain special characters may be quoted:
\  - non-breaking space
\t - tab
\n - newline
\r - linefeed
\000 - octalcode of character (replace 000 by code)
\x00 - hexcode of character (replace 00 by code)
\\ - backslash
\" - uninterpreted "
 
VRL - Version Ressource Locator
---------------------------------

[<proto>://<server>]/<project>/<branch>/<objid>/<version>

<proto>: bagp, bagps
<server>: #<virtual server>, <server-name-or-ip>[:<port>], self
<project>: project name
<branch>: branch name
<objid>: Object ID (if left out: start object)
<version>: version number of that object (if left out: newest) or tag

possible query parameters (with default):
recursive=1
 if the object is a directory: retrieve recursive
diff=<version>
 retrieve difference from version to the one referenced



Handshake commands
--------------------

auth <username> <passwd>
 request login via password

 The server may close the connection after a certain amount of failed trials,
 depending on its configuration

 If passwd is left blank the server may authenticate against the
 SSL-certificate from the client or make an anonymous login.


Connection configuration/control
-----------------------------------

packlevel <level>
 set a gzip packlevel (permissible: 0, g1-9, 0=off, 9=max)

 if level is not given returns a list of allowed ziplevels in the blob
 (currently only 0, g1 - g9 will follow later)

 only blobs are packed

quit
 No answer, just closed the stream.

Server configuration
----------------------

All these commands require Server-Admin privilege

config <key> [<value>]
 retrieve value for key, or set a new value
 if no key is given all keys are returned in the blob


getusers
 get all usernames


getuseracl <username>
 get ACL for this user, or the caller himself of no username was given


setuseracl <username> <aclstring>


createuser <username> <password> [<aclstring>]

dropuser <username>

setpassword <username> <password>
 if no password is given the blob of this command sets the SSL-certificate
 the caller may set his own password (if not anonymous)

disableuser <username>

enableuser <username>

Meta info
-----------

getmeta projects|branches|tags|blessinglevels

Projects/Branches
----------

projects
 list all projects

createproject <project> [<primary admins...>]
 create a new project (optionally with initial admins)

projectacl <project> <user> [<aclstring>]
 get/set acl of a user

projectbranchacl <project> <branch> <user> [<aclstring>]

projectbranches <project>
 list all branches of the project

projectcreatebranch <project> <newbranch>
 create a new branch (empty)

Objects
----------

getpatch <VRL>
 Get a complete Patch file for this VRL.

getpatchbylist
BLOB: patchlist
 Get a patch file for all VRL's in the list (where one VRL is on one line).

getfull <VRL>
 Get a patch file that creates the full files from zero.

getfullbylist
BLOB: VRL-List

putpatch
BLOB
 send a patch to the server

putfull
BLOB
 Send a patch file to the server which constructs the files from zero, the
 server will do the diffing.

settag <tag>
BLOB: VRL-List

gettags <VRL>

getmergepoints <VRL>

setmergepoint <VRL> <VRL>

copyobject <VRL> <VRL>
 Copy an object from VRL 1 to VRL 2 and set the according merge point, the
 object must not exist in the target branch
 
copyobjects
 the blob contains the VRL pairs to copy

copybranch <VRL> <VRL>
 Copy the complete branch (newest version), the second branch must be empty

Watching
----------

watchmode
 switches this connection to the watch mode:

 In watchmode the client sends updates, which objects/projects/etc to watch.
 The server simply sends updates what has been changed/added/deleted.

 Client commands:
 normalmode
   Interrupt watchmode: go to normal mode but keep watching and collecting.
   
 quitwatch
   Quit watchmode: go to normal mode and delete all watchpoints.

 add <type>:<object>
   make this object watched, type is one of "object", "project", "branch", ..?

 del <type>:<object>
   remove this object from the watchlist

 Server answers:

 ~<type>:<object>
  changed
 +<type>:<object>
  added
 -<type>:<object>
  removed
 .
  exited watchmode