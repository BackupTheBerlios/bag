C/S protocol
================


General Format
-----------------

Client commands:
<bloblength> <cmd> <parms...>\n
<data of length bloblength>

 <bloblength> - length of optional data
 <cmd> - command
 <parms> - parameters

Server answers/interrupts:
<errcode><bloblength> <answer>\n
<data of length bloblength>

 <errcode> - success or failure code ("+" or "-")
 <bloblength> - length of data (if not sent: 0)
 <answer> - answer string or machine readable error info
 <data> - answer data (eg. patchfile) or error message

strings which contain whitespaces may be concatenated with "..."
any whitespace (also in "") is converted to one normal space
strings which contain special characters may be quoted:
\  - non-breaking space
\t - tab
\n - newline
\r - linefeed
\000 - octalcode of character (replace 000 by code)
\x00 - hexcode of character (replace 00 by code)
\\ - backslash
\" - uninterpreted "
 
VRL - Version Ressource Locator
---------------------------------

<proto>://<server>/<project>/<branch>/<objid>/<version>

<proto>: bagp, bagps
<server>: #<virtual server>, <server-name-or-ip>[:<port>], self
<project>: project name
<branch>: branch name
<objid>: Object ID (if left out: start object)
<version>: version number of that object (if left out: newest) or tag

possible query parameters (with default):
recursive=1
 if the object is a directory: retrieve recursive
diff=<version>
 retrieve difference from version to the one referenced



Handshake commands
--------------------

auth <username> <passwd>
 request login via password

 The server may close the connection after a certain amount of failed trials,
 depending on its configuration

 If passwd is left blank the server may authenticate against the
 SSL-certificate from the client or make an anonymous login.


Connection configuration/control
-----------------------------------

packlevel <level>
 set a gzip packlevel (permissible: 0, g1-9, 0=off, 9=max)

 returns a list of allowed ziplevels (currently "0 g1 g2 g3 g4 g5 g6 g7 g8 g9)

quit
 No answer, just closed the stream.

Server configuration
----------------------

config <key> [<value>]
 retrieve value for key, or set a new value


getusers
 get all usernames


getuseracl <username>
 get ACL for this user


setuseracl <username> <aclstring>


createuser <username> <password> <aclstring>

dropuser <username>

setpassword <username> <password>

disableuser <username>
 disables the login.

Meta info
-----------

getmeta projects|branches|tags|blessinglevels

Projects
----------

projectacl <project> <user> [<aclstring>]
 get/set acl of a user

projectbranchacl <project> <branch> <user> [<aclstring>]

projectbranches <project>
 list all branches of the project

projectcreatebranch <project> <newbranch> <VRL>
 create a new branch starting with VRL  (may contain a query)

Objects
----------

getpatch <VRL>
 Get a complete Patch file for this VRL.

getpatchbylist
BLOB: patchlist
 Get a patch file for all VRL's in the list (where one VRL is on one line).

getfull <VRL>
 Get a patch file that creates the full files from zero.

getfullbylist
BLOB: VRL-List

putpatch
BLOB
 send a patch to the server

putfull
BLOB
 Send a patch file to the server which constructs the files from zero, the
 server will do the diffing.

settag <tag>
BLOB: VRL-List

gettags <VRL>

getmergepoints <VRL>

setmergepoint <VRL> <VRL>


Watching
----------

watchmode
 switches this connection to the watch mode:

 In watchmode the client sends updates, which objects/projects/etc to watch.
 The server simply sends updates what has been changed/added/deleted.

 Client commands:
 normalmode
   Interrupt watchmode: go to normal mode but keep watching and collecting.
   
 quitwatch
   Quit watchmode: go to normal mode and delete all watchpoints.

 add <type>:<object>
   make this object watched, type is one of "object", "project", "branch", ..?

 del <type>:<object>
   remove this object from the watchlist

 Server answers:

 ~<type>:<object>
  changed
 +<type>:<object>
  added
 -<type>:<object>
  removed
 .
  exited watchmode